'use strict';

const __DEV__ = process.env.NODE_ENV;

if (__DEV__ !== 'development') {
	console.log(
		`The right env is not set.\nExpected 'development' but got ${__DEV__}`
	);
	process.exit(1);
}

// Makes the script crash on unhandled rejections instead of silently
// ignoring them.
process.on('unhandledRejection', err => {
	throw err;
});

const chalk = require('chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');

const paths = require('./paths');
const clearConsole = require('./dev-utils/clearConsole');
const createCompiler = require('./dev-utils/createCompiler');
const configFactory = require('./config/webpack.config');
const createDevServerConfig = require('./config/webpack-dev-server.config');

const isInteractive = process.stdout.isTTY;

const PORT = 8080;
const HOST = '0.0.0.0';

(function startServer() {
	start()
		.then(devServer => {
			['SIGINT', 'SIGTERM'].forEach(function (sig) {
				process.on(sig, function () {
					devServer.close();
					process.exit();
				});
			});

			if (process.env.CI !== 'true') {
				// Gracefully exit when stdin ends
				process.stdin.on('end', function () {
					devServer.close();
					process.exit();
				});
			}
		})
		.catch(err => {
			if (err && err.message) {
				console.log(err.message);
			}
			process.exit(1);
		});
})();

function start() {
	// Generate configuration
	const config = configFactory('development');
	const protocol = 'http';
	const appName = require(paths.appPackageJson).name;
	const urls = prepareUrls(
		protocol,
		HOST,
		PORT,
		paths.publicUrlOrPath.slice(0, 1)
	);

	// Create a webpack compiler that is configured with custom messages.
	const compiler = createCompiler({
		appName,
		config,
		urls,
		webpack
	});

	// Serve webpack assets generated by the compiler over a web server.
	const serverConfig = createDevServerConfig(urls.lanUrlForConfig);

	const devServer = new WebpackDevServer(compiler, serverConfig);

	return new Promise(resolve => {
		devServer.listen(PORT, HOST, err => {
			if (err) {
				return console.log(err);
			}
			if (isInteractive) {
				clearConsole();
			}

			console.log(chalk.cyan('Starting the development server...\n'));
		});

		return resolve(devServer);
	});
}
